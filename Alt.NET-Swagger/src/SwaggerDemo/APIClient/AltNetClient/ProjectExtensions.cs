// IMPORTANT: This class is auto-generated. Any changes to it will be lost
// during proxy re-generation. Generated by AutoRest from
// http://swagger.localtest.me/swagger/docs/v1. Visit
// https://github.com/Azure/autorest for details and usage examples.

namespace APIClient.AltNetClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class ProjectExtensions
    {
            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            public static ProjectDTO GetProjectById(this IProject operations, string projectId)
            {
                return Task.Factory.StartNew(s => ((IProject)s).GetProjectByIdAsync(projectId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProjectDTO> GetProjectByIdAsync( this IProject operations, string projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<ProjectDTO> result = await operations.GetProjectByIdWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            public static IList<UserDTO> GetProjectDevelopers(this IProject operations, string projectId)
            {
                return Task.Factory.StartNew(s => ((IProject)s).GetProjectDevelopersAsync(projectId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> GetProjectDevelopersAsync( this IProject operations, string projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<IList<UserDTO>> result = await operations.GetProjectDevelopersWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
