// IMPORTANT: This class is auto-generated. Any changes to it will be lost
// during proxy re-generation. Generated by AutoRest from
// http://swagger.localtest.me/swagger/docs/v1. Visit
// https://github.com/Azure/autorest for details and usage examples.

namespace APIClient.AltNetClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class UserExtensions
    {
            /// <summary>
            /// This operation is expensive to call as it'll lookup in multiple databases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the user to find.
            /// </param>
            public static UserDTO GetUserById(this IUser operations, int? id)
            {
                return Task.Factory.StartNew(s => ((IUser)s).GetUserByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation is expensive to call as it'll lookup in multiple databases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the user to find.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserDTO> GetUserByIdAsync( this IUser operations, int? id, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<UserDTO> result = await operations.GetUserByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id to update
            /// </param>
            /// <param name='user'>
            /// Updated user model.
            /// </param>
            public static object UpdateUser(this IUser operations, int? id, UserDTO user)
            {
                return Task.Factory.StartNew(s => ((IUser)s).UpdateUserAsync(id, user), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id to update
            /// </param>
            /// <param name='user'>
            /// Updated user model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserAsync( this IUser operations, int? id, UserDTO user, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<object> result = await operations.UpdateUserWithHttpMessagesAsync(id, user, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the user to delete
            /// </param>
            public static object DeletUserById(this IUser operations, int? id)
            {
                return Task.Factory.StartNew(s => ((IUser)s).DeletUserByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the user to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeletUserByIdAsync( this IUser operations, int? id, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<object> result = await operations.DeletUserByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User model.
            /// </param>
            public static object CreateUser(this IUser operations, UserDTO user)
            {
                return Task.Factory.StartNew(s => ((IUser)s).CreateUserAsync(user), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateUserAsync( this IUser operations, UserDTO user, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<object> result = await operations.CreateUserWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageSize'>
            /// Number of records to return
            /// </param>
            public static IList<UserDTO> ListAllUsers(this IUser operations, int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((IUser)s).ListAllUsersAsync(pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageSize'>
            /// Number of records to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> ListAllUsersAsync( this IUser operations, int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<IList<UserDTO>> result = await operations.ListAllUsersWithHttpMessagesAsync(pageSize, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Project ID
            /// </param>
            public static IList<UserDTO> ListAllUsersByProject(this IUser operations, string projectId)
            {
                return Task.Factory.StartNew(s => ((IUser)s).ListAllUsersByProjectAsync(projectId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectId'>
            /// Project ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDTO>> ListAllUsersByProjectAsync( this IUser operations, string projectId, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<IList<UserDTO>> result = await operations.ListAllUsersByProjectWithHttpMessagesAsync(projectId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
