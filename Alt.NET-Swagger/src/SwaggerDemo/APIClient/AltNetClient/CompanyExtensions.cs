// IMPORTANT: This class is auto-generated. Any changes to it will be lost
// during proxy re-generation. Generated by AutoRest from
// http://swagger.localtest.me/swagger/docs/v1. Visit
// https://github.com/Azure/autorest for details and usage examples.

namespace APIClient.AltNetClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class CompanyExtensions
    {
            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CompanyDTO GetCompany(this ICompany operations, string companyId, string id)
            {
                return Task.Factory.StartNew(s => ((ICompany)s).GetCompanyAsync(companyId, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CompanyDTO> GetCompanyAsync( this ICompany operations, string companyId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<CompanyDTO> result = await operations.GetCompanyWithHttpMessagesAsync(companyId, id, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='updatedData'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CompanyDTO UpdateCompany(this ICompany operations, string companyId, CompanyDTO updatedData, string id)
            {
                return Task.Factory.StartNew(s => ((ICompany)s).UpdateCompanyAsync(companyId, updatedData, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='updatedData'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CompanyDTO> UpdateCompanyAsync( this ICompany operations, string companyId, CompanyDTO updatedData, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<CompanyDTO> result = await operations.UpdateCompanyWithHttpMessagesAsync(companyId, updatedData, id, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object DeleteCompany(this ICompany operations, string companyId, string id)
            {
                return Task.Factory.StartNew(s => ((ICompany)s).DeleteCompanyAsync(companyId, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCompanyAsync( this ICompany operations, string companyId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<object> result = await operations.DeleteCompanyWithHttpMessagesAsync(companyId, id, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static IList<CompanyDTO> GetList(this ICompany operations, int? pageSize = default(int?))
            {
                return Task.Factory.StartNew(s => ((ICompany)s).GetListAsync(pageSize), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CompanyDTO>> GetListAsync( this ICompany operations, int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<IList<CompanyDTO>> result = await operations.GetListWithHttpMessagesAsync(pageSize, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// </param>
            public static object CreateCompany(this ICompany operations, CompanyDTO data)
            {
                return Task.Factory.StartNew(s => ((ICompany)s).CreateCompanyAsync(data), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='data'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateCompanyAsync( this ICompany operations, CompanyDTO data, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<object> result = await operations.CreateCompanyWithHttpMessagesAsync(data, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            public static IList<ProjectDTO> GetCompanyProjects(this ICompany operations, string companyId)
            {
                return Task.Factory.StartNew(s => ((ICompany)s).GetCompanyProjectsAsync(companyId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProjectDTO>> GetCompanyProjectsAsync( this ICompany operations, string companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<IList<ProjectDTO>> result = await operations.GetCompanyProjectsWithHttpMessagesAsync(companyId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
