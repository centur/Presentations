// IMPORTANT: This class is auto-generated. Any changes to it will be lost
// during proxy re-generation. Generated by AutoRest from
// http://swagger.localtest.me/swagger/docs/v1. Visit
// https://github.com/Azure/autorest for details and usage examples.

namespace APIClient.AltNetClient
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// User operations.
    /// </summary>
    public partial interface IUser
    {
        /// <summary>
        /// This operation is expensive to call as it'll lookup in multiple
        /// databases.
        /// </summary>
        /// <param name='id'>
        /// Id of the user to find.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserDTO>> GetUserByIdWithHttpMessagesAsync(int? id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='id'>
        /// User Id to update
        /// </param>
        /// <param name='user'>
        /// Updated user model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateUserWithHttpMessagesAsync(int? id, UserDTO user, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='id'>
        /// Id of the user to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeletUserByIdWithHttpMessagesAsync(int? id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='user'>
        /// User model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateUserWithHttpMessagesAsync(UserDTO user, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='pageSize'>
        /// Number of records to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserDTO>>> ListAllUsersWithHttpMessagesAsync(int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// </summary>
        /// <param name='projectId'>
        /// Project ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserDTO>>> ListAllUsersByProjectWithHttpMessagesAsync(string projectId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
